%% @doc
%%   Networking I/O
-module(m_knet).

%% monad interface
-export([unit/1, fail/1, '>>='/2]).

%% BDD interface
-export([
   'Given'/0,
   'When'/0,
   'Then'/0
]).

%%%----------------------------------------------------------------------------   
%%%
%%% monad interface
%%%
%%%----------------------------------------------------------------------------

unit(X) ->
   m_state:unit(X).

fail(X) ->
   m_state:fail(X).

'>>='(X, Fun) ->
   m_state:'>>='(X, Fun).

%%%----------------------------------------------------------------------------   
%%%
%%% Given
%%%
%%%----------------------------------------------------------------------------
'Given'() -> 
   m_state:unit(undefined).


%%%----------------------------------------------------------------------------   
%%%
%%% When
%%%
%%%----------------------------------------------------------------------------
'When'() -> 
   m_state:unit(undefined).


%%%----------------------------------------------------------------------------   
%%%
%%% Then
%%%
%%%----------------------------------------------------------------------------
'Then'() ->
   fun(State) ->
      undefined
   end.

